//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: Mount&Blade Scene Object file
//   Authors: Swyter
//    E-mail: swyterzone+mab@gmail.com
//   Version: 2020.06.17
//   Purpose: Opens scene files (SceneObj/scn_*.sco) on M&B 1.011 and Warband
//  Category: Game
// File Mask: *.sco
//  ID Bytes: 33 FD FF FF
//------------------------------------------------

LittleEndian();

struct
{
    char magic[4];      /* swy: '3ýÿÿ', or 33 FD FF FF. seemingly stored as `mnv this, #716` (-717) on Android */
    int  version;       /* swy: always version 4 */
    int  object_count;  /* swy: number of scene/mission objects/props that follow */
} head <open=true, bgcolor=cDkRed>;

/* -- scene objects */
struct obj
{
    enum <uint32> /* swy: as shown in the edit mode scene editor combobox; same order */
    {
        Prop    = 0, /* Scene Prop */
        Entry   = 1, /* Entry Point */
        Item    = 2, /* Item Kind */
        Unused  = 3,
        Plant   = 4, /* Flora */
        Passage = 5
    } type <bgcolor=cBlue>;

    /* swy: the index from (ID_scene_props.py or ID_items.py) that (hopefully) matches the
            string constant; depending on the object type */
    uint32 id;

    /* swy: some kind of universal flag that depends on the game version? don't ask me */
    enum <uint32>
    {
        Const_MB = 0x930F6C4,
        Const_WB = 0x94AEF80
    } unk <format=hex>; /* swy: looking at the Site::save_site_objects() -> Mission_object::write(rglIO_Stream&) function decompilation, it seems to write weird uninitialized stack garbage */

    float mtx_row_a[3]; /* affine 3x3 row-major matrix; encodes rotation and maybe shearing (rglMat3) */
    float mtx_row_b[3];
    float mtx_row_c[3];

    float pos[3]; /* translation; x, y, z */

    /* swy: it's set to zero for things without constant; like entry points or passages
            the constant hopefully should match the ID. Keep in mind that the game
            doesn't seem to use this string field for retrieving anything, only
            IDs, so they should be remapped manually after re-shuffling. */
    uint32 str_size; char str[str_size] <fgcolor=cWhite, bgcolor=cDkBlue>;

    /* swy: as shown in the edit mode scene editor; entry number is used for entry point indexes,
            while the menu item is used to map passages to city menus */
    uint32 entry_no;
    uint32 menu_item_no;

    float scale[3]; /* scaling multiplier, per axis; x, y, z */
} objects[head.object_count] <optimize=false, read=sceneprop_read>;


/* -- ai mesh vertices; probably */
uint32 next_section_rel_offset;
uint32 id;
struct
{
    float a;
    float b;
    float height;
} ss[id];


uint32 ido;
struct
{
    uint32 a;
    uint32 b;
    uint32 c;
    uint32 d;
    uint32 e;
} tt[ido];


uint32 ide;
struct
{
    uint32 poly_count <bgcolor=cDkGreen>;
    struct
    {
        uint a,b;
    } elem[poly_count];

     int a;
} yy[ide] <optimize=false>;     

uint32 idu;

/* -- ground layers */
FSeek(startof(next_section_rel_offset) + sizeof(int) + next_section_rel_offset);
//FSeek(0xe8f5); // tldmod\SceneObj\scn_cair_andros_center.sco
//FSeek(0x83d8); // MountBlade Warband\Modules\Native\SceneObj\scn_town_13_center.sco
struct
{
    char magic[4] <bgcolor=cDkRed>; /* ¦ÑJÿ / 0xff4ad1a6 / ground_paint_saved_magic */
    uint32 relative_offset_to_end;
    uint32 num_layers;
    uint32 scene_width;
    uint32 scene_height;

    local uint block_count = scene_width * scene_height;

    struct named_block
    {
        uint32 index;
        uint32 str_size;
        char str[str_size] <fgcolor=cWhite, bgcolor=cDkBlue>;
        uint32 enabled;

        if (enabled)
        {
            local int remaining_blocks = block_count;
            do {
            struct
            {
                uint32 rle;
                uint32 elem_count;

                Printf("remaining_blocks = %u -= (%u + %u == %u)\n", remaining_blocks, rle, elem_count, rle + elem_count);
    
                remaining_blocks -= rle + elem_count;

                char elem[elem_count];
            } blockb[1] <optimize=false>;
            }while(remaining_blocks > 0);

        }
    } block[num_layers] <optimize=false>;
} thing;

// sum of steppe blocks
// >>> 5041 + 4 + 4
// 5049
// >>> (5041 + 4 + 4) / 2.
// 2524.5
// >>> 71*71
// 5041
// >>> (5041 + 4) / 2.
// 2522.5
// >>> math.sqrt(5041 + 4)
// 71.02816342831905

string UIntToStr(unsigned int e)
{
    string s; SPrintf(s, "%d", e); return s;
}

string sceneprop_read(struct obj &m)
{
         if (m.type == Prop ||
             m.type == Item ||
             m.type == Plant)   return EnumToString(m.type) + " -- " + m.str;
    else if (m.type == Entry)   return EnumToString(m.type) + " point ["  + UIntToStr(m.entry_no) + "]";
    else if (m.type == Passage) return EnumToString(m.type) + " for menu item " + UIntToStr(m.menu_item_no);
    else                        return EnumToString(m.type);
};