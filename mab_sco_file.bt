//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: Mount&Blade Scene Object file
//   Authors: Swyter
//    E-mail: swyterzone+mab@gmail.com
//   Version: 2021.09.19
//   Purpose: Opens scene files (SceneObj/scn_*.sco) on M&B 1.011 and Warband
//  Category: Game
// File Mask: *.sco
//  ID Bytes: 33 FD FF FF
//------------------------------------------------

LittleEndian();

typedef union
{
    char fourcc[4];
    int32 integer <format=hex>;
} rglmarker <read=read_rglmarker>;

string read_rglmarker(rglmarker &m)
{
    return "[" + m.fourcc + "]";
};

typedef struct
{
    uint tag_len;
    if (tag_len)
        char s[tag_len];
} rgltag <read=read_rgltag>;

string read_rgltag(struct rgltag& _thing)
{
    if (_thing.tag_len <= 0)
        return "";
    else
        return _thing.s;
}

typedef union { uint val <format=hex>; struct { byte r,g,b,a; } chan; } rglcolor;


struct
{
    rglmarker magic;   /* swy: '3ýÿÿ', or 33 FD FF FF. seemingly stored as `mnv this, #716` (-717) on Android */
    int version;       /* swy: always version 4 */
} head <open=true, bgcolor=cDkRed>;

/* -- scene objects */
struct
{
    int object_count;  /* swy: number of scene/mission objects/props that follow */
    struct obj
    {
        enum <uint32> /* swy: as shown in the edit mode scene editor combobox; same order */
        {
            Prop    = 0, /* Scene Prop */
            Entry   = 1, /* Entry Point */
            Item    = 2, /* Item Kind */
            Unused  = 3,
            Plant   = 4, /* Flora */
            Passage = 5
        } type <bgcolor=cBlue>;
    
        /* swy: the index from (ID_scene_props.py or ID_items.py) that (hopefully) matches the
                string constant; depending on the object type */
        uint32 id;
    
        /* swy: some kind of universal flag that depends on the game version? don't ask me */
        enum <uint32>
        {
            Const_MB_SWC_old  = 0x952EFEC,
            Const_MB_SWC_c    = 0x99EF47C,
            Const_MB_SWC_d    = 0x387F7E0,
            Const_MB_SWC      = 0x9A3F034,
            Const_MB_a        = 0x930F6C4,
            Const_MB_TLD      = 0x930F6D4,
            Const_MB_c        = 0x930F6DC,
            Const_WB          = 0x94AEF80,
            Const_MB_Native   = 0x3A4EF9C,
            Const_WB_Standalo = 0x317F2C0,
            Const_MB_Native_a = 0x386F7E8,
            Const_MB_Native_b = 0x397F154,
            Const_MB_Native_d = 0x940EFD0,
            Const_MB_Native_e = 0x947EF90,
            Const_MB_Native_f = 0x94FEF94,

        } unk <format=hex>; /* swy: looking at the Site::save_site_objects() -> Mission_object::write(rglIO_Stream&) function decompilation, it seems to write weird uninitialized stack garbage */
    
        float mtx_row_a[3]; /* affine 3x3 row-major matrix; encodes rotation and maybe shearing (rglMat3) */
        float mtx_row_b[3];
        float mtx_row_c[3];
    
        float pos[3]; /* translation; x, y, z */
    
        /* swy: it's set to zero for things without constant; like entry points or passages
                the constant hopefully should match the ID. Keep in mind that the game
                doesn't seem to use this string field for retrieving anything, only
                IDs, so they should be remapped manually after re-shuffling. */
        rgltag str <fgcolor=cWhite, bgcolor=cDkBlue>;
    
        /* swy: as shown in the edit mode scene editor; entry number is used for entry point indexes,
                while the menu item is used to map passages to city menus */
        uint32 entry_no;
        uint32 menu_item_no;
    
        float scale[3]; /* scaling multiplier, per axis; x, y, z */
    } objects[object_count] <optimize=false, read=sceneprop_read>;
} mission_objects;


/* -- ai mesh vertices; probably */
struct
{
    uint32 section_size <format=hex>; /* swy: this seems more like a relative offset to skip the block altogether */
    uint32 vertex_count;
    struct
    {
        float x;
        float y;
        float height;
    } vertex[vertex_count];
    
    
    uint32 edge_count;
    struct
    {
        int32 some_count; /* swy: maybe adjacency count for nearby polys */
        int32 vtx_a;
        int32 vtx_b;
        int32 face_idx_maybe_a; /* swy: one of these is set to -10000 when some_count is 1 */
        int32 face_idx_maybe_b; /*      mainly the bottom one here, I think it's a main face back-reference */
    } edge[edge_count];
    
    
    uint32 face_count;
    struct
    {
        uint32 edge_count <bgcolor=cDkGreen>;
        uint a[edge_count] <bgcolor=cBlue>;
        uint b[edge_count] <bgcolor=cDkBlue>;

        uint has_more <bgcolor=cRed>;

        if (has_more)
            uint ai_mesh_id <bgcolor=cWhite>;

    } face[face_count] <optimize=false>;     
} ai_mesh;

if (!FEof()) /* swy: if the file ends here it means that it's an interior and that we don't have any terrain/paint stuff */
{
    rglmarker terrain_marker; /* swy: this is just here to ensure that the end of the ai_mesh stuff lines up automatically with the next section without needing fseek(), as a bit of a canary */

    /* -- ground layers */
    FSeek(startof(ai_mesh.section_size) + sizeof(int) + ai_mesh.section_size);
    //FSeek(0xe8f5); // tldmod\SceneObj\scn_cair_andros_center.sco
    //FSeek(0x83d8); // MountBlade Warband\Modules\Native\SceneObj\scn_town_13_center.sco
    struct
    {
        rglmarker magic <bgcolor=cDkRed>; /* ¦ÑJÿ / 0xff4ad1a6 / ground_paint_saved_magic */
        uint32 section_size; /* swy: or a relative offset to the end */
    
        uint32 num_layers;
    
        uint32 scene_width;
        uint32 scene_height;
    
        /* swy: if every terrain layer has something in common is that there is
                a static number of width * height cells for every type */
        local uint block_count = scene_width * scene_height;
    
        struct ground_block
        {
            enum <int32>
            {
                gray_stone       =      0,
                brown_stone      =      1,
                turf             =      2,
                steppe           =      3,
                snow             =      4,
                earth            =      5,
                desert           =      6, /* swy: sometimes missing, depending on the map; why not just disable it/make it empty */
                forest           =      7,
                pebbles          =      8,
                village          =      9,
                path             =     10,
                ground_elevation =  -7793, /* swy: wtfbbq?! */
                ground_leveling  = -12565, /* swy: more like vertex_coloring */
            } index <bgcolor=cBlue>;

            rgltag str <fgcolor=cWhite, bgcolor=cDkBlue>;

            uint32 enabled;
    
            if (enabled)
            {
                local int remaining_blocks = block_count;

                while (remaining_blocks > 0)
                {
                    struct
                    {
                        int rle; /* swy: empty blocks to skip; substract from the total and exit early if no blocks left */
    
                        remaining_blocks -= rle;
    
                        if (remaining_blocks <= 0)
                            break;
    
                        uint32 elem_count;
        
                        //Printf("remaining_blocks = %u -= (%u + %u == %u)\n", remaining_blocks, rle, elem_count, rle + elem_count);
            
                        remaining_blocks -= elem_count;
        
                             if (index == ground_elevation) float    elem[elem_count];
                        else if (index == ground_leveling)  rglcolor elem[elem_count]; /* swy: thanks, scn_village_81.sco, you are a great and terse example of ground_leveling :-) */
                        else                                ubyte    elem[elem_count] <format=hex>;

                        /* swconquest-git\SceneObj\scn_mainplanet_sarapin_land_battle.sco */
                        /* ground_elevation_floats -> 6347 floats / 25388 bytes */

                    } blockb[1] <optimize=false>;
                }
            }
        } named_block[num_layers] <optimize=false, read=block_read>;
    } terrain;
}

// sum of steppe blocks
// >>> 5041 + 4 + 4
// 5049
// >>> (5041 + 4 + 4) / 2.
// 2524.5
// >>> 71*71
// 5041
// >>> (5041 + 4) / 2.
// 2522.5
// >>> math.sqrt(5041 + 4)
// 71.02816342831905

string UIntToStr(unsigned int e)
{
    string s; SPrintf(s, "%d", e); return s;
}

string sceneprop_read(struct obj &m)
{
         if (m.type == Prop ||
             m.type == Item ||
             m.type == Plant)   return EnumToString(m.type) + " -- " + m.str.s;
    else if (m.type == Entry)   return EnumToString(m.type) + " point ["  + UIntToStr(m.entry_no) + "]";
    else if (m.type == Passage) return EnumToString(m.type) + " for menu item " + UIntToStr(m.menu_item_no);
    else                        return EnumToString(m.type);
};

string block_read(struct ground_block &m)
{
    return "[/] " + m.str.s + " (enabled: " + UIntToStr(m.enabled) + ", id: " + UIntToStr(m.index) + ")";
};

