//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: Mount&Blade Binary Resource File
//   Authors: Swyter
//   Version: 2020.07.11
//   Purpose: Opens M&B 1.011 and Warband BRF files (Resource/*.brf)
//  Category: Game
// File Mask: *.brf
//  ID Bytes: 33 FD FF FF
//------------------------------------------------

LittleEndian();

typedef struct
{
    uint tag_len;
    char tag[tag_len];
} rgltag <read=read_rgltag>;

string read_rgltag(struct rgltag& _thing)
{
    return _thing.tag;
}

struct texture
{
    uint object_count;

    struct 
    {
        rgltag tex_name <bgcolor=cSilver>;
        uint32 flag <format=hex>;
    } elem[object_count] <optimize=false>;
};

struct material
{
    uint object_count;

    struct 
    {
        rgltag mat_name <bgcolor=cSilver>;
        uint32 flag <format=hex>;

        uint shader_name_len;
        char shader_name[shader_name_len] <bgcolor=cSilver>;

        rgltag texdiffuse_name <bgcolor=cSilver>;
        rgltag texa_name;
        rgltag texb_name;
        rgltag texc_name;
        rgltag texd_name;
        rgltag texe_name;
        uint thing[3];
    } elem[object_count] <optimize=false>;
};

struct mesh
{
    uint object_count;
    struct
    {
        rgltag tag <bgcolor=cRed>;
        uint32 flag <format=hex>;
        rgltag mat_name <bgcolor=cSilver>;
        uint pos_cnt;
        struct 
        {
            float x, y, z;
        } pos[pos_cnt];
        uint unk_zero;
        uint extra_frames;

        if (extra_frames)
            uint time;
        uint vtx_cnt;
        struct
        {
            int pos_idx;
            union
            {
              uint color <format=hex>;
              struct
              {
                ubyte r,g,b,a;
              } components;
            } rgb;
            float  n_a, n_b, n_c, x_a, x_b, y_a, y_b;
        } vtx[vtx_cnt * (extra_frames + 1)];

        int tri_cnt;

        struct
        {
            int a[3];
        } tri[tri_cnt];
    } mesh[object_count] <optimize=false>;
};

struct body
{
    uint object_count;
    struct
    {
        uint32 tag_len;
        char tag[tag_len];

        struct body_type
        {
            uint body_type_len;
            char body_type[body_type_len] <bgcolor=cSilver>;

                 if (Stricmp(body_type, "composite") == 0)
            {
                uint composite_cnt;
                struct body_type composite[composite_cnt] <optimize=false>;
            }
            else if (Stricmp(body_type, "sphere") == 0)
            {
                float radius, x,z,y; uint flag <format=hex>;
            }
            else if (Stricmp(body_type, "capsule") == 0)
            {
                float radius, x,z,y, x,z,y; uint flag <format=hex>;
            }
            else if (Stricmp(body_type, "manifold") == 0)
            {
                uint vtx_elem;
                struct { float xyz[3]; } vtx[vtx_elem];

                uint poly_elem;
                struct { int minus_one, unk_zero, vtx_idx_cnt; uint vtx_idx[vtx_idx_cnt]; } poly[poly_elem] <optimize=false>;
            }
        } body <optimize=false>;
    } body[object_count] <optimize=false>;
};

/* swy: iterate over all the posible BRF chunks */
while (FTell() < FileSize())
{
    struct brf_section
    {
        uint32 tag_len; char tag[tag_len] <bgcolor=cDkYellow>;
    
             if (Stricmp(tag, "texture" ) == 0) struct texture  tex <open=true, bgcolor=cWhite>;
             if (Stricmp(tag, "material") == 0) struct material mat <open=true, bgcolor=cDkGreen>;
        else if (Stricmp(tag, "mesh"    ) == 0) struct mesh     mes <open=true, bgcolor=cDkRed>;
        else if (Stricmp(tag, "body"    ) == 0) struct body     bod <open=true, bgcolor=cDkBlue>;
        else if (Stricmp(tag, "end"     ) == 0);
    } section <optimize=false>;
}