//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: Mount&Blade Binary Resource File
//   Authors: Swyter
//   Version: 2020.07.11
//   Purpose: Opens M&B 1.011 and Warband BRF files (Resource/*.brf)
//  Category: Game
// File Mask: *.brf
//  ID Bytes: 33 FD FF FF
//------------------------------------------------

LittleEndian();

struct
{
    uint32 tag_len;       /* swy: 4 */
    char tag[tag_len];       /* swy: always version 4 */
    int  object_count;  /* swy: number of scene/mission objects/props that follow */

    struct
    {
        uint32 tag_len;       /* swy: 4 */
        char tag[tag_len];       /* swy: always version 4 */
        uint32 flag <format=hex>;
        uint mat_name_len;
        char mat_name[mat_name_len];
        uint pos_cnt;
        struct 
        {
            float x, y, z;
        } pos[pos_cnt];
        uint unk_zero;
        uint extra_frames;

        if (extra_frames)
            uint time;
        uint vtx_cnt;
        struct
        {
            int pos_idx;
            union
            {
              uint color <format=hex>;
              struct
              {
                ubyte r,g,b,a;
              } components;
            } rgb;
            float  n_a, n_b, n_c, x_a, x_b, y_a, y_b;
        } vtx[vtx_cnt * (extra_frames + 1)];

        int tri_cnt;

        struct
        {
            int a[3];
        } tri[tri_cnt];
    } mesh[object_count] <optimize=false>;
} mesh <open=true, bgcolor=cDkRed>;


struct body_sphere
{
    float x, y, z;
    float radius;
};

struct
{
    uint32 tag_len;       /* swy: 4 */
    char tag[tag_len];       /* swy: always version 4 */
    int  object_count;  /* swy: number of scene/mission objects/props that follow */

    struct
    {
        uint32 tag_len;       /* swy: 4 */
        char tag[tag_len];       /* swy: always version 4 */
        uint body_type_len;
        char body_type[body_type_len];
        uint composite_cnt;
        struct 
        {
            uint body_type_len;
            char body_type[body_type_len];

                 if (Stricmp(body_type, "capsule") == 0)
            {
                float radius, x,z,y, x,z,y; uint flag <format=hex>;
            }
            else if (Stricmp(body_type, "sphere") == 0)
            {
                float radius, x,z,y; uint flag <format=hex>;
            }
            else if (Stricmp(body_type, "manifold") == 0)
            {
                uint vtx_elem;
                struct { float xyz[3]; } vtx[vtx_elem];
                uint poly_elem;
                struct { int minus_one, unk_zero, vtx_idx_cnt; uint vtx_idx[vtx_idx_cnt]; } poly[poly_elem] <optimize=false>;
            }
        } composite[composite_cnt] <optimize=false>;
    } body[object_count] <optimize=false>;
} body;